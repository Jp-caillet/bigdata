"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const streamToIterator = require("../lib/index");
const intoStream = require("into-stream");
ava_1.default('empty stream (legacy)', async (t) => {
    let stream = intoStream.obj([]);
    let x = streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    let i = x.next();
    t.true(i.done);
});
ava_1.default('empty stream', async (t) => {
    let stream = intoStream.obj([]);
    let x = await streamToIterator(stream);
    await x.init();
    let i = await x.next();
    t.true(i.done);
});
ava_1.default('stream one value (legacy)', async (t) => {
    let values = ['abc'];
    let stream = intoStream.obj(values);
    let x = streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    for (let value of values) {
        let iteration = x.next();
        await checkLegacyIteration(t, iteration, value);
    }
    t.true(x.next().done);
});
ava_1.default('stream one value', async (t) => {
    let values = ['abc'];
    let stream = intoStream.obj(values);
    let x = await streamToIterator(stream);
    for (let value of values) {
        let iteration = await x.next();
        checkIteration(t, iteration, value);
    }
    const iteration = await x.next();
    t.true(iteration.done);
});
ava_1.default('stream some values (legacy)', async (t) => {
    let values = [5, 'b', Infinity, 'e', 'p'];
    let stream = intoStream.obj(values);
    let x = streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    for (let value of values) {
        let iteration = x.next();
        await checkLegacyIteration(t, iteration, value);
    }
    t.true(x.next().done);
});
ava_1.default('stream some values', async (t) => {
    let values = [5, 'b', Infinity, 'e', 'p'];
    let stream = intoStream.obj(values);
    let x = streamToIterator(stream);
    for (let value of values) {
        let iteration = await x.next();
        await checkIteration(t, iteration, value);
    }
    t.true((await x.next()).done);
});
ava_1.default('same value on fast iteration (legacy)', async (t) => {
    let values = [1, 2, 3];
    let stream = intoStream.obj(values);
    let x = await streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    const r1 = x.next();
    const r2 = x.next();
    const v1 = await r1.value;
    const v2 = await r2.value;
    t.false(r1.done);
    t.false(r2.done);
    t.is(v1, v2);
});
ava_1.default('same value on fast iteration', async (t) => {
    let values = [1, 2, 3];
    let stream = intoStream.obj(values);
    let x = await streamToIterator(stream);
    const p1 = x.next();
    const p2 = x.next();
    const r1 = await p1;
    const r2 = await p2;
    t.false(r1.done);
    t.false(r2.done);
    t.is(r1.value, r2.value);
});
ava_1.default('stream some values on non-object mode (legacy)', async (t) => {
    let values = [Buffer.from([65, 66, 67]), Buffer.from([68, 69])];
    let stream = intoStream(values);
    let x = streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    for (let expected of values) {
        let iteration = x.next();
        t.false(iteration.done);
        let actual = await iteration.value;
        t.true(expected.equals(actual));
    }
    t.true(x.next().done);
});
ava_1.default('stream some values on non-object mode', async (t) => {
    let values = [Buffer.from([65, 66, 67]), Buffer.from([68, 69])];
    let stream = intoStream(values);
    let x = streamToIterator(stream);
    for (let expected of values) {
        let iteration = await x.next();
        t.false(iteration.done);
        t.true(expected.equals(iteration.value));
    }
    const lastIteration = await x.next();
    t.true(lastIteration.done);
});
ava_1.default('readme example 1', async (t) => {
    const values = [2, 3, 4];
    const readable = intoStream.obj(values);
    const iterator = await streamToIterator(readable)[Symbol.iterator]()
        .init();
    const allValues = [];
    for (let valuePromise of iterator) {
        const value = await valuePromise;
        allValues.push(value * value);
    }
    t.deepEqual(allValues, [4, 9, 16]);
});
ava_1.default('readme example 2', async (t) => {
    let values = [2, 3, 4];
    let readable = intoStream.obj(values);
    let iterator = streamToIterator(readable);
    let allValues = [];
    for await (let value of iterator) {
        allValues.push(value * value);
    }
    t.deepEqual(allValues, [4, 9, 16]);
});
async function checkLegacyIteration(t, iteration, expected) {
    t.false(iteration.done);
    let value = await iteration.value;
    t.deepEqual(value, expected);
}
function checkIteration(t, iteration, expected) {
    t.false(iteration.done);
    let value = iteration.value;
    t.deepEqual(value, expected);
}
//# sourceMappingURL=index.js.map